// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SogigiMind.Data;

namespace SogigiMind.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201002152910_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SogigiMind.Data.AccessTokenClaimData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AccessTokenId")
                        .HasColumnName("access_token_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_access_token_claims");

                    b.HasIndex("AccessTokenId")
                        .HasName("ix_access_token_claims_access_token_id");

                    b.ToTable("access_token_claims");
                });

            modelBuilder.Entity("SogigiMind.Data.AccessTokenData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnName("inserted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("TokenHash")
                        .IsRequired()
                        .HasColumnName("token_hash")
                        .HasColumnType("bytea");

                    b.HasKey("Id")
                        .HasName("pk_access_tokens");

                    b.HasIndex("TokenHash")
                        .IsUnique()
                        .HasName("ix_access_tokens_token_hash");

                    b.ToTable("access_tokens");
                });

            modelBuilder.Entity("SogigiMind.Data.BlobData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("bytea");

                    b.Property<long>("ContentLength")
                        .HasColumnName("content_length")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .HasColumnName("content_type")
                        .HasColumnType("text");

                    b.Property<string>("Etag")
                        .HasColumnName("etag")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnName("last_modified")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_blobs");

                    b.ToTable("blobs");
                });

            modelBuilder.Entity("SogigiMind.Data.EndUserData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Acct")
                        .HasColumnName("acct")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnName("inserted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnName("settings")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("pk_end_users");

                    b.HasIndex("Acct")
                        .IsUnique()
                        .HasName("ix_end_users_acct");

                    b.ToTable("end_users");
                });

            modelBuilder.Entity("SogigiMind.Data.EstimationLogData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnName("inserted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("RemoteImageId")
                        .HasColumnName("remote_image_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnName("result")
                        .HasColumnType("jsonb");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_estimation_logs");

                    b.HasIndex("InsertedAt")
                        .HasName("ix_estimation_logs_inserted_at");

                    b.HasIndex("RemoteImageId")
                        .HasName("ix_estimation_logs_remote_image_id");

                    b.HasIndex("UserId")
                        .HasName("ix_estimation_logs_user_id");

                    b.ToTable("estimation_logs");
                });

            modelBuilder.Entity("SogigiMind.Data.FetchAttemptData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ContentLength")
                        .HasColumnName("content_length")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .HasColumnName("content_type")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnName("inserted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("RemoteImageId")
                        .HasColumnName("remote_image_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_fetch_attempts");

                    b.HasIndex("RemoteImageId")
                        .HasName("ix_fetch_attempts_remote_image_id");

                    b.ToTable("fetch_attempts");
                });

            modelBuilder.Entity("SogigiMind.Data.PersonalSensitivityData", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("RemoteImageId")
                        .HasColumnName("remote_image_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnName("inserted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsSensitive")
                        .HasColumnName("is_sensitive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId", "RemoteImageId")
                        .HasName("pk_personal_sensitivities");

                    b.HasIndex("RemoteImageId")
                        .HasName("ix_personal_sensitivities_remote_image_id");

                    b.ToTable("personal_sensitivities");
                });

            modelBuilder.Entity("SogigiMind.Data.RemoteImageData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnName("inserted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsKnown")
                        .HasColumnName("is_known")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPublic")
                        .HasColumnName("is_public")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSensitive")
                        .HasColumnName("is_sensitive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("xmin")
                        .HasColumnType("xid");

                    b.HasKey("Id")
                        .HasName("pk_remote_images");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasName("ix_remote_images_url");

                    b.ToTable("remote_images");
                });

            modelBuilder.Entity("SogigiMind.Data.ThumbnailData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BlobId")
                        .HasColumnName("blob_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnName("content_type")
                        .HasColumnType("text");

                    b.Property<long>("FetchAttemptId")
                        .HasColumnName("fetch_attempt_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Height")
                        .HasColumnName("height")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAnimation")
                        .HasColumnName("is_animation")
                        .HasColumnType("boolean");

                    b.Property<int>("Width")
                        .HasColumnName("width")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_thumbnails");

                    b.HasIndex("BlobId")
                        .HasName("ix_thumbnails_blob_id");

                    b.HasIndex("FetchAttemptId")
                        .HasName("ix_thumbnails_fetch_attempt_id");

                    b.ToTable("thumbnails");
                });

            modelBuilder.Entity("SogigiMind.Data.AccessTokenClaimData", b =>
                {
                    b.HasOne("SogigiMind.Data.AccessTokenData", "AccessToken")
                        .WithMany("Claims")
                        .HasForeignKey("AccessTokenId")
                        .HasConstraintName("fk_access_token_claims_access_tokens_access_token_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SogigiMind.Data.EstimationLogData", b =>
                {
                    b.HasOne("SogigiMind.Data.RemoteImageData", "RemoteImage")
                        .WithMany("EstimationLogs")
                        .HasForeignKey("RemoteImageId")
                        .HasConstraintName("fk_estimation_logs_remote_images_remote_image_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SogigiMind.Data.EndUserData", "User")
                        .WithMany("EstimationLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_estimation_logs_end_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SogigiMind.Data.FetchAttemptData", b =>
                {
                    b.HasOne("SogigiMind.Data.RemoteImageData", "RemoteImage")
                        .WithMany("FetchAttempts")
                        .HasForeignKey("RemoteImageId")
                        .HasConstraintName("fk_fetch_attempts_remote_images_remote_image_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SogigiMind.Data.PersonalSensitivityData", b =>
                {
                    b.HasOne("SogigiMind.Data.RemoteImageData", "RemoteImage")
                        .WithMany()
                        .HasForeignKey("RemoteImageId")
                        .HasConstraintName("fk_personal_sensitivities_remote_images_remote_image_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SogigiMind.Data.EndUserData", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_personal_sensitivities_end_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SogigiMind.Data.ThumbnailData", b =>
                {
                    b.HasOne("SogigiMind.Data.BlobData", "Blob")
                        .WithMany()
                        .HasForeignKey("BlobId")
                        .HasConstraintName("fk_thumbnails_blobs_blob_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SogigiMind.Data.FetchAttemptData", "FetchAttempt")
                        .WithMany("Thumbnails")
                        .HasForeignKey("FetchAttemptId")
                        .HasConstraintName("fk_thumbnails_fetch_attempts_fetch_attempt_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
